// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.mosip.registration_client.models;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression", "serial"})
public class UserPigeon {

  /** Error class for passing custom error details to Flutter via a thrown PlatformException. */
  public static class FlutterError extends RuntimeException {

    /** The error code. */
    public final String code;

    /** The error details. Must be a datatype supported by the api codec. */
    public final Object details;

    public FlutterError(@NonNull String code, @Nullable String message, @Nullable Object details) 
    {
      super(message);
      this.code = code;
      this.details = details;
    }
  }

  @NonNull
  protected static ArrayList<Object> wrapError(@NonNull Throwable exception) {
    ArrayList<Object> errorList = new ArrayList<Object>(3);
    if (exception instanceof FlutterError) {
      FlutterError error = (FlutterError) exception;
      errorList.add(error.code);
      errorList.add(error.getMessage());
      errorList.add(error.details);
    } else {
      errorList.add(exception.toString());
      errorList.add(exception.getClass().getSimpleName());
      errorList.add(
        "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    }
    return errorList;
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static final class User {
    private @NonNull String userId;

    public @NonNull String getUserId() {
      return userId;
    }

    public void setUserId(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"userId\" is null.");
      }
      this.userId = setterArg;
    }

    private @Nullable String name;

    public @Nullable String getName() {
      return name;
    }

    public void setName(@Nullable String setterArg) {
      this.name = setterArg;
    }

    private @Nullable String email;

    public @Nullable String getEmail() {
      return email;
    }

    public void setEmail(@Nullable String setterArg) {
      this.email = setterArg;
    }

    private @Nullable Boolean isActive;

    public @Nullable Boolean getIsActive() {
      return isActive;
    }

    public void setIsActive(@Nullable Boolean setterArg) {
      this.isActive = setterArg;
    }

    private @Nullable Boolean isLocked;

    public @Nullable Boolean getIsLocked() {
      return isLocked;
    }

    public void setIsLocked(@Nullable Boolean setterArg) {
      this.isLocked = setterArg;
    }

    private @NonNull Boolean isOnboarded;

    public @NonNull Boolean getIsOnboarded() {
      return isOnboarded;
    }

    public void setIsOnboarded(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isOnboarded\" is null.");
      }
      this.isOnboarded = setterArg;
    }

    private @Nullable String centerName;

    public @Nullable String getCenterName() {
      return centerName;
    }

    public void setCenterName(@Nullable String setterArg) {
      this.centerName = setterArg;
    }

    private @Nullable String centerId;

    public @Nullable String getCenterId() {
      return centerId;
    }

    public void setCenterId(@Nullable String setterArg) {
      this.centerId = setterArg;
    }

    private @Nullable String machineName;

    public @Nullable String getMachineName() {
      return machineName;
    }

    public void setMachineName(@Nullable String setterArg) {
      this.machineName = setterArg;
    }

    private @Nullable String machineId;

    public @Nullable String getMachineId() {
      return machineId;
    }

    public void setMachineId(@Nullable String setterArg) {
      this.machineId = setterArg;
    }

    private @Nullable String failedAttempts;

    public @Nullable String getFailedAttempts() {
      return failedAttempts;
    }

    public void setFailedAttempts(@Nullable String setterArg) {
      this.failedAttempts = setterArg;
    }

    private @Nullable String errorMessage;

    public @Nullable String getErrorMessage() {
      return errorMessage;
    }

    public void setErrorMessage(@Nullable String setterArg) {
      this.errorMessage = setterArg;
    }

    /** Constructor is non-public to enforce null safety; use Builder. */
    User() {}

    public static final class Builder {

      private @Nullable String userId;

      public @NonNull Builder setUserId(@NonNull String setterArg) {
        this.userId = setterArg;
        return this;
      }

      private @Nullable String name;

      public @NonNull Builder setName(@Nullable String setterArg) {
        this.name = setterArg;
        return this;
      }

      private @Nullable String email;

      public @NonNull Builder setEmail(@Nullable String setterArg) {
        this.email = setterArg;
        return this;
      }

      private @Nullable Boolean isActive;

      public @NonNull Builder setIsActive(@Nullable Boolean setterArg) {
        this.isActive = setterArg;
        return this;
      }

      private @Nullable Boolean isLocked;

      public @NonNull Builder setIsLocked(@Nullable Boolean setterArg) {
        this.isLocked = setterArg;
        return this;
      }

      private @Nullable Boolean isOnboarded;

      public @NonNull Builder setIsOnboarded(@NonNull Boolean setterArg) {
        this.isOnboarded = setterArg;
        return this;
      }

      private @Nullable String centerName;

      public @NonNull Builder setCenterName(@Nullable String setterArg) {
        this.centerName = setterArg;
        return this;
      }

      private @Nullable String centerId;

      public @NonNull Builder setCenterId(@Nullable String setterArg) {
        this.centerId = setterArg;
        return this;
      }

      private @Nullable String machineName;

      public @NonNull Builder setMachineName(@Nullable String setterArg) {
        this.machineName = setterArg;
        return this;
      }

      private @Nullable String machineId;

      public @NonNull Builder setMachineId(@Nullable String setterArg) {
        this.machineId = setterArg;
        return this;
      }

      private @Nullable String failedAttempts;

      public @NonNull Builder setFailedAttempts(@Nullable String setterArg) {
        this.failedAttempts = setterArg;
        return this;
      }

      private @Nullable String errorMessage;

      public @NonNull Builder setErrorMessage(@Nullable String setterArg) {
        this.errorMessage = setterArg;
        return this;
      }

      public @NonNull User build() {
        User pigeonReturn = new User();
        pigeonReturn.setUserId(userId);
        pigeonReturn.setName(name);
        pigeonReturn.setEmail(email);
        pigeonReturn.setIsActive(isActive);
        pigeonReturn.setIsLocked(isLocked);
        pigeonReturn.setIsOnboarded(isOnboarded);
        pigeonReturn.setCenterName(centerName);
        pigeonReturn.setCenterId(centerId);
        pigeonReturn.setMachineName(machineName);
        pigeonReturn.setMachineId(machineId);
        pigeonReturn.setFailedAttempts(failedAttempts);
        pigeonReturn.setErrorMessage(errorMessage);
        return pigeonReturn;
      }
    }

    @NonNull
    ArrayList<Object> toList() {
      ArrayList<Object> toListResult = new ArrayList<Object>(12);
      toListResult.add(userId);
      toListResult.add(name);
      toListResult.add(email);
      toListResult.add(isActive);
      toListResult.add(isLocked);
      toListResult.add(isOnboarded);
      toListResult.add(centerName);
      toListResult.add(centerId);
      toListResult.add(machineName);
      toListResult.add(machineId);
      toListResult.add(failedAttempts);
      toListResult.add(errorMessage);
      return toListResult;
    }

    static @NonNull User fromList(@NonNull ArrayList<Object> list) {
      User pigeonResult = new User();
      Object userId = list.get(0);
      pigeonResult.setUserId((String) userId);
      Object name = list.get(1);
      pigeonResult.setName((String) name);
      Object email = list.get(2);
      pigeonResult.setEmail((String) email);
      Object isActive = list.get(3);
      pigeonResult.setIsActive((Boolean) isActive);
      Object isLocked = list.get(4);
      pigeonResult.setIsLocked((Boolean) isLocked);
      Object isOnboarded = list.get(5);
      pigeonResult.setIsOnboarded((Boolean) isOnboarded);
      Object centerName = list.get(6);
      pigeonResult.setCenterName((String) centerName);
      Object centerId = list.get(7);
      pigeonResult.setCenterId((String) centerId);
      Object machineName = list.get(8);
      pigeonResult.setMachineName((String) machineName);
      Object machineId = list.get(9);
      pigeonResult.setMachineId((String) machineId);
      Object failedAttempts = list.get(10);
      pigeonResult.setFailedAttempts((String) failedAttempts);
      Object errorMessage = list.get(11);
      pigeonResult.setErrorMessage((String) errorMessage);
      return pigeonResult;
    }
  }

  private static class UserApiCodec extends StandardMessageCodec {
    public static final UserApiCodec INSTANCE = new UserApiCodec();

    private UserApiCodec() {}

    @Override
    protected Object readValueOfType(byte type, @NonNull ByteBuffer buffer) {
      switch (type) {
        case (byte) 128:
          return User.fromList((ArrayList<Object>) readValue(buffer));
        default:
          return super.readValueOfType(type, buffer);
      }
    }

    @Override
    protected void writeValue(@NonNull ByteArrayOutputStream stream, Object value) {
      if (value instanceof User) {
        stream.write(128);
        writeValue(stream, ((User) value).toList());
      } else {
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter. */
  public interface UserApi {

    @NonNull 
    User validateUser(@NonNull String username);

    /** The codec used by UserApi. */
    static @NonNull MessageCodec<Object> getCodec() {
      return UserApiCodec.INSTANCE;
    }
    /**Sets up an instance of `UserApi` to handle messages through the `binaryMessenger`. */
    static void setup(@NonNull BinaryMessenger binaryMessenger, @Nullable UserApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(
                binaryMessenger, "dev.flutter.pigeon.UserApi.validateUser", getCodec());
        if (api != null) {
          channel.setMessageHandler(
              (message, reply) -> {
                ArrayList<Object> wrapped = new ArrayList<Object>();
                ArrayList<Object> args = (ArrayList<Object>) message;
                String usernameArg = (String) args.get(0);
                try {
                  User output = api.validateUser(usernameArg);
                  wrapped.add(0, output);
                }
 catch (Throwable exception) {
                  ArrayList<Object> wrappedError = wrapError(exception);
                  wrapped = wrappedError;
                }
                reply.reply(wrapped);
              });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
}
