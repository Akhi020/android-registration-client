// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface RegistrationData ()
+ (RegistrationData *)fromList:(NSArray *)list;
+ (nullable RegistrationData *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation RegistrationData
+ (instancetype)makeWithLanguages:(NSArray<NSString *> *)languages
    demographicsData:(NSString *)demographicsData
    biometricsData:(NSString *)biometricsData
    documentsData:(NSString *)documentsData {
  RegistrationData* pigeonResult = [[RegistrationData alloc] init];
  pigeonResult.languages = languages;
  pigeonResult.demographicsData = demographicsData;
  pigeonResult.biometricsData = biometricsData;
  pigeonResult.documentsData = documentsData;
  return pigeonResult;
}
+ (RegistrationData *)fromList:(NSArray *)list {
  RegistrationData *pigeonResult = [[RegistrationData alloc] init];
  pigeonResult.languages = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.languages != nil, @"");
  pigeonResult.demographicsData = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.demographicsData != nil, @"");
  pigeonResult.biometricsData = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.biometricsData != nil, @"");
  pigeonResult.documentsData = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.documentsData != nil, @"");
  return pigeonResult;
}
+ (nullable RegistrationData *)nullableFromList:(NSArray *)list {
  return (list) ? [RegistrationData fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.languages ?: [NSNull null]),
    (self.demographicsData ?: [NSNull null]),
    (self.biometricsData ?: [NSNull null]),
    (self.documentsData ?: [NSNull null]),
  ];
}
@end

@interface RegistrationDataApiCodecReader : FlutterStandardReader
@end
@implementation RegistrationDataApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [RegistrationData fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface RegistrationDataApiCodecWriter : FlutterStandardWriter
@end
@implementation RegistrationDataApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[RegistrationData class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface RegistrationDataApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation RegistrationDataApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[RegistrationDataApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[RegistrationDataApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *RegistrationDataApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    RegistrationDataApiCodecReaderWriter *readerWriter = [[RegistrationDataApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void RegistrationDataApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<RegistrationDataApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.RegistrationDataApi.registration"
        binaryMessenger:binaryMessenger
        codec:RegistrationDataApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(registrationRegistrationData:completion:)], @"RegistrationDataApi api (%@) doesn't respond to @selector(registrationRegistrationData:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        RegistrationData *arg_registrationData = GetNullableObjectAtIndex(args, 0);
        [api registrationRegistrationData:arg_registrationData completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
