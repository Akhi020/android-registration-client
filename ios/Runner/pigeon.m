// Autogenerated from Pigeon (v10.1.4), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"

#if TARGET_OS_OSX
#import <FlutterMacOS/FlutterMacOS.h>
#else
#import <Flutter/Flutter.h>
#endif

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface User ()
+ (User *)fromList:(NSArray *)list;
+ (nullable User *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation User
+ (instancetype)makeWithUserId:(NSString *)userId
    name:(nullable NSString *)name
    email:(nullable NSString *)email
    isActive:(nullable NSNumber *)isActive
    isLocked:(nullable NSNumber *)isLocked
    isOnboarded:(NSNumber *)isOnboarded
    centerName:(nullable NSString *)centerName
    centerId:(nullable NSString *)centerId
    machineName:(nullable NSString *)machineName
    machineId:(nullable NSString *)machineId
    failedAttempts:(nullable NSString *)failedAttempts
    errorCode:(nullable NSString *)errorCode
    machineStatus:(NSNumber *)machineStatus
    centerStatus:(NSNumber *)centerStatus {
  User* pigeonResult = [[User alloc] init];
  pigeonResult.userId = userId;
  pigeonResult.name = name;
  pigeonResult.email = email;
  pigeonResult.isActive = isActive;
  pigeonResult.isLocked = isLocked;
  pigeonResult.isOnboarded = isOnboarded;
  pigeonResult.centerName = centerName;
  pigeonResult.centerId = centerId;
  pigeonResult.machineName = machineName;
  pigeonResult.machineId = machineId;
  pigeonResult.failedAttempts = failedAttempts;
  pigeonResult.errorCode = errorCode;
  pigeonResult.machineStatus = machineStatus;
  pigeonResult.centerStatus = centerStatus;
  return pigeonResult;
}
+ (User *)fromList:(NSArray *)list {
  User *pigeonResult = [[User alloc] init];
  pigeonResult.userId = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.userId != nil, @"");
  pigeonResult.name = GetNullableObjectAtIndex(list, 1);
  pigeonResult.email = GetNullableObjectAtIndex(list, 2);
  pigeonResult.isActive = GetNullableObjectAtIndex(list, 3);
  pigeonResult.isLocked = GetNullableObjectAtIndex(list, 4);
  pigeonResult.isOnboarded = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.isOnboarded != nil, @"");
  pigeonResult.centerName = GetNullableObjectAtIndex(list, 6);
  pigeonResult.centerId = GetNullableObjectAtIndex(list, 7);
  pigeonResult.machineName = GetNullableObjectAtIndex(list, 8);
  pigeonResult.machineId = GetNullableObjectAtIndex(list, 9);
  pigeonResult.failedAttempts = GetNullableObjectAtIndex(list, 10);
  pigeonResult.errorCode = GetNullableObjectAtIndex(list, 11);
  pigeonResult.machineStatus = GetNullableObjectAtIndex(list, 12);
  NSAssert(pigeonResult.machineStatus != nil, @"");
  pigeonResult.centerStatus = GetNullableObjectAtIndex(list, 13);
  NSAssert(pigeonResult.centerStatus != nil, @"");
  return pigeonResult;
}
+ (nullable User *)nullableFromList:(NSArray *)list {
  return (list) ? [User fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.userId ?: [NSNull null]),
    (self.name ?: [NSNull null]),
    (self.email ?: [NSNull null]),
    (self.isActive ?: [NSNull null]),
    (self.isLocked ?: [NSNull null]),
    (self.isOnboarded ?: [NSNull null]),
    (self.centerName ?: [NSNull null]),
    (self.centerId ?: [NSNull null]),
    (self.machineName ?: [NSNull null]),
    (self.machineId ?: [NSNull null]),
    (self.failedAttempts ?: [NSNull null]),
    (self.errorCode ?: [NSNull null]),
    (self.machineStatus ?: [NSNull null]),
    (self.centerStatus ?: [NSNull null]),
  ];
}
@end

@interface UserApiCodecReader : FlutterStandardReader
@end
@implementation UserApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [User fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface UserApiCodecWriter : FlutterStandardWriter
@end
@implementation UserApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[User class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface UserApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation UserApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[UserApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[UserApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *UserApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    UserApiCodecReaderWriter *readerWriter = [[UserApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void UserApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<UserApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.registration_client.UserApi.validateUser"
        binaryMessenger:binaryMessenger
        codec:UserApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(validateUserUsername:langCode:completion:)], @"UserApi api (%@) doesn't respond to @selector(validateUserUsername:langCode:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_username = GetNullableObjectAtIndex(args, 0);
        NSString *arg_langCode = GetNullableObjectAtIndex(args, 1);
        [api validateUserUsername:arg_username langCode:arg_langCode completion:^(User *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
