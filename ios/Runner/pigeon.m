// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface LocationResponse ()
+ (LocationResponse *)fromList:(NSArray *)list;
+ (nullable LocationResponse *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation LocationResponse
+ (instancetype)makeWithCountryList:(NSArray<NSString *> *)countryList
    regionList:(NSArray<NSString *> *)regionList
    provinceList:(NSArray<NSString *> *)provinceList
    cityList:(NSArray<NSString *> *)cityList
    zoneList:(NSArray<NSString *> *)zoneList
    postalCodeList:(NSArray<NSString *> *)postalCodeList {
  LocationResponse* pigeonResult = [[LocationResponse alloc] init];
  pigeonResult.countryList = countryList;
  pigeonResult.regionList = regionList;
  pigeonResult.provinceList = provinceList;
  pigeonResult.cityList = cityList;
  pigeonResult.zoneList = zoneList;
  pigeonResult.postalCodeList = postalCodeList;
  return pigeonResult;
}
+ (LocationResponse *)fromList:(NSArray *)list {
  LocationResponse *pigeonResult = [[LocationResponse alloc] init];
  pigeonResult.countryList = GetNullableObjectAtIndex(list, 0);
  NSAssert(pigeonResult.countryList != nil, @"");
  pigeonResult.regionList = GetNullableObjectAtIndex(list, 1);
  NSAssert(pigeonResult.regionList != nil, @"");
  pigeonResult.provinceList = GetNullableObjectAtIndex(list, 2);
  NSAssert(pigeonResult.provinceList != nil, @"");
  pigeonResult.cityList = GetNullableObjectAtIndex(list, 3);
  NSAssert(pigeonResult.cityList != nil, @"");
  pigeonResult.zoneList = GetNullableObjectAtIndex(list, 4);
  NSAssert(pigeonResult.zoneList != nil, @"");
  pigeonResult.postalCodeList = GetNullableObjectAtIndex(list, 5);
  NSAssert(pigeonResult.postalCodeList != nil, @"");
  return pigeonResult;
}
+ (nullable LocationResponse *)nullableFromList:(NSArray *)list {
  return (list) ? [LocationResponse fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.countryList ?: [NSNull null]),
    (self.regionList ?: [NSNull null]),
    (self.provinceList ?: [NSNull null]),
    (self.cityList ?: [NSNull null]),
    (self.zoneList ?: [NSNull null]),
    (self.postalCodeList ?: [NSNull null]),
  ];
}
@end

@interface LocationResponseApiCodecReader : FlutterStandardReader
@end
@implementation LocationResponseApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [LocationResponse fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface LocationResponseApiCodecWriter : FlutterStandardWriter
@end
@implementation LocationResponseApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[LocationResponse class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface LocationResponseApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation LocationResponseApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[LocationResponseApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[LocationResponseApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *LocationResponseApiGetCodec(void) {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    LocationResponseApiCodecReaderWriter *readerWriter = [[LocationResponseApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void LocationResponseApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<LocationResponseApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.LocationResponseApi.fetchLocationList"
        binaryMessenger:binaryMessenger
        codec:LocationResponseApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(fetchLocationListLangCode:hierarchyName:completion:)], @"LocationResponseApi api (%@) doesn't respond to @selector(fetchLocationListLangCode:hierarchyName:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_langCode = GetNullableObjectAtIndex(args, 0);
        NSArray<NSString *> *arg_hierarchyName = GetNullableObjectAtIndex(args, 1);
        [api fetchLocationListLangCode:arg_langCode hierarchyName:arg_hierarchyName completion:^(LocationResponse *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
