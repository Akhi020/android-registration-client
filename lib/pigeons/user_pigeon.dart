// Autogenerated from Pigeon (v10.0.1), do not edit directly.
// See also: https://pub.dev/packages/pigeon
// ignore_for_file: public_member_api_docs, non_constant_identifier_names, avoid_as, unused_import, unnecessary_parenthesis, prefer_null_aware_operators, omit_local_variable_types, unused_shown_name, unnecessary_import

import 'dart:async';
import 'dart:typed_data' show Float64List, Int32List, Int64List, Uint8List;

import 'package:flutter/foundation.dart' show ReadBuffer, WriteBuffer;
import 'package:flutter/services.dart';

class User {
  User({
    required this.userId,
    this.name,
    this.email,
    this.isActive,
    this.isLocked,
    this.isOnboarded,
    this.centerName,
    this.centerId,
    this.machineName,
    this.machineId,
    this.failedAttempts,
    this.errorMessage,
  });

  String userId;

  String? name;

  String? email;

  bool? isActive;

  bool? isLocked;

  bool? isOnboarded;

  String? centerName;

  String? centerId;

  String? machineName;

  String? machineId;

  String? failedAttempts;

  String? errorMessage;

  Object encode() {
    return <Object?>[
      userId,
      name,
      email,
      isActive,
      isLocked,
      isOnboarded,
      centerName,
      centerId,
      machineName,
      machineId,
      failedAttempts,
      errorMessage,
    ];
  }

  static User decode(Object result) {
    result as List<Object?>;
    return User(
      userId: result[0]! as String,
      name: result[1] as String?,
      email: result[2] as String?,
      isActive: result[3] as bool?,
      isLocked: result[4] as bool?,
      isOnboarded: result[5] as bool?,
      centerName: result[6] as String?,
      centerId: result[7] as String?,
      machineName: result[8] as String?,
      machineId: result[9] as String?,
      failedAttempts: result[10] as String?,
      errorMessage: result[11] as String?,
    );
  }
}

class _UserApiCodec extends StandardMessageCodec {
  const _UserApiCodec();
  @override
  void writeValue(WriteBuffer buffer, Object? value) {
    if (value is User) {
      buffer.putUint8(128);
      writeValue(buffer, value.encode());
    } else {
      super.writeValue(buffer, value);
    }
  }

  @override
  Object? readValueOfType(int type, ReadBuffer buffer) {
    switch (type) {
      case 128: 
        return User.decode(readValue(buffer)!);
      default:
        return super.readValueOfType(type, buffer);
    }
  }
}

class UserApi {
  /// Constructor for [UserApi].  The [binaryMessenger] named argument is
  /// available for dependency injection.  If it is left null, the default
  /// BinaryMessenger will be used which routes to the host platform.
  UserApi({BinaryMessenger? binaryMessenger})
      : _binaryMessenger = binaryMessenger;
  final BinaryMessenger? _binaryMessenger;

  static const MessageCodec<Object?> codec = _UserApiCodec();

  Future<User> getUser(String arg_username) async {
    final BasicMessageChannel<Object?> channel = BasicMessageChannel<Object?>(
        'dev.flutter.pigeon.UserApi.getUser', codec,
        binaryMessenger: _binaryMessenger);
    final List<Object?>? replyList =
        await channel.send(<Object?>[arg_username]) as List<Object?>?;
    if (replyList == null) {
      throw PlatformException(
        code: 'channel-error',
        message: 'Unable to establish connection on channel.',
      );
    } else if (replyList.length > 1) {
      throw PlatformException(
        code: replyList[0]! as String,
        message: replyList[1] as String?,
        details: replyList[2],
      );
    } else if (replyList[0] == null) {
      throw PlatformException(
        code: 'null-error',
        message: 'Host platform returned null value for non-null return value.',
      );
    } else {
      return (replyList[0] as User?)!;
    }
  }
}
